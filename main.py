# -*- coding: utf-8 -*-
"""ML Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EHBKuef6vzoJ5ribga_9ekwFYrDBu2sk
"""

import numpy as np
import timeit
import cv2
import glob
from sklearn.svm import SVC
from sklearn.multiclass import OneVsRestClassifier
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
import tensorflow as tf
from keras import Input
from keras.models import Sequential
from keras.layers import Conv2D, Dense, Flatten, MaxPooling2D, AveragePooling2D
from google.colab import drive
drive.mount('/content/drive')

"""# ***Data Preprocessing***"""

train_image = []
train_label = []
test_image = []
test_label = []

train_image_cnn = []
test_image_cnn = []

train_image_gcn = []
test_image_gcn = []

for filename in glob.glob('/content/drive/MyDrive/Colab Notebooks/Covid19-dataset/train/Covid/*'):
    img = cv2.imread(filename)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    res = cv2.resize(gray, (300, 300))
    train_image_cnn.append(res)
    arr = np.array(res)
    flat_arr = arr.ravel()
    train_image.append(flat_arr)
    train_label.append(0)

    res_gcn = cv2.resize(img,(300,300))
    train_image_gcn.append(res_gcn)
    
for filename in glob.glob('/content/drive/MyDrive/Colab Notebooks/Covid19-dataset/train/Normal/*'):
    img = cv2.imread(filename)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    res = cv2.resize(gray, (300, 300))
    train_image_cnn.append(res)
    arr = np.array(res)
    flat_arr = arr.ravel()
    train_image.append(flat_arr)
    train_label.append(1)

    res_gcn = cv2.resize(img,(300,300))
    train_image_gcn.append(res_gcn)
    
for filename in glob.glob('/content/drive/MyDrive/Colab Notebooks/Covid19-dataset/train/Viral Pneumonia/*'):
    img = cv2.imread(filename)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    res = cv2.resize(gray, (300, 300))
    train_image_cnn.append(res)
    arr = np.array(res)
    flat_arr = arr.ravel()
    train_image.append(flat_arr)
    train_label.append(2)

    res_gcn = cv2.resize(img,(300,300))
    train_image_gcn.append(res_gcn)
    
for filename in glob.glob('/content/drive/MyDrive/Colab Notebooks/Covid19-dataset/test/Covid/*'):
    img = cv2.imread(filename)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    res = cv2.resize(gray, (300, 300))
    test_image_cnn.append(res)
    arr = np.array(res)
    flat_arr = arr.ravel()
    test_image.append(flat_arr)
    test_label.append(0)

    res_gcn = cv2.resize(img,(300,300))
    test_image_gcn.append(res_gcn)
    
for filename in glob.glob('/content/drive/MyDrive/Colab Notebooks/Covid19-dataset/test/Normal/*'):
    img = cv2.imread(filename)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    res = cv2.resize(gray, (300, 300))
    test_image_cnn.append(res)
    arr = np.array(res)
    flat_arr = arr.ravel()
    test_image.append(flat_arr)
    test_label.append(1)

    res_gcn = cv2.resize(img,(300,300))
    test_image_gcn.append(res_gcn)
    
for filename in glob.glob('/content/drive/MyDrive/Colab Notebooks/Covid19-dataset/test/Viral Pneumonia/*'):
    img = cv2.imread(filename)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    res = cv2.resize(gray, (300, 300))
    test_image_cnn.append(res)
    arr = np.array(res)
    flat_arr = arr.ravel()
    test_image.append(flat_arr)
    test_label.append(2)

    res_gcn = cv2.resize(img,(300,300))
    test_image_gcn.append(res_gcn)
    
train_image = np.asarray(train_image)
train_label = np.asarray(train_label)
test_image = np.asarray(test_image)
test_label = np.asarray(test_label)

"""Normalize data for CNN model"""

train_image_cnn = np.asarray(train_image_cnn)
test_image_cnn = np.asarray(test_image_cnn)
train_image_cnn = train_image_cnn/255.0
test_image_cnn = test_image_cnn/255.0

"""Normalize data for SVM and logistic regression"""

train_image_std = StandardScaler().fit_transform(train_image)
test_image_std = StandardScaler().fit_transform(test_image)

"""SVM model initialization"""

clf_svm = SVC()

"""SVM train and test"""

start = timeit.default_timer()
clf_svm.fit(train_image_std, train_label)
pred_label_svm = clf_svm.predict(test_image_std)
acc_svm = accuracy_score(test_label, pred_label_svm)
stop = timeit.default_timer()

print('Time: ', stop - start) 
print('SVM Accuracy: ', acc_svm)

"""Logistic regression initialization"""

clf_LR = LogisticRegression(max_iter=300)

"""Logistic regression train and test"""

start = timeit.default_timer()
clf_LR.fit(train_image_std, train_label)
pred_label_LR = clf_LR.predict(test_image_std)
acc_LR = accuracy_score(test_label, pred_label_LR)
stop = timeit.default_timer()

print('Time: ', stop - start) 
print('Logistic Regresssion Accuracy: ', acc_LR)



"""# ***PCA***"""

pca = PCA(n_components=2)
train_image_std_pca = pca.fit(train_image_std).transform(train_image_std)
test_image_std_pca = pca.fit(test_image_std).transform(test_image_std)

"""# ***LDA***"""

lda = LinearDiscriminantAnalysis(n_components=2)
train_image_std_lda = lda.fit(train_image_std, train_label).transform(train_image_std)
test_image_std_lda = lda.fit(test_image_std, test_label).transform(test_image_std)

"""SVM with pca"""

start = timeit.default_timer()
clf_svm.fit(train_image_std_pca, train_label)
pred_label_svm = clf_svm.predict(test_image_std_pca)
acc_svm = accuracy_score(test_label, pred_label_svm)
stop = timeit.default_timer()

print('Time: ', stop - start) 
print('SVM Accuracy with pca: ', acc_svm)

"""Logistic regression with pca"""

start = timeit.default_timer()
clf_LR.fit(train_image_std_pca, train_label)
pred_label_LR = clf_LR.predict(test_image_std_pca)
acc_LR = accuracy_score(test_label, pred_label_LR)
stop = timeit.default_timer()

print('Time: ', stop - start) 
print('Logistic Regresssion Accuracy pca: ', acc_LR)

"""SVM with LDA"""

start = timeit.default_timer()
clf_svm.fit(train_image_std_lda, train_label)
pred_label_svm = clf_svm.predict(test_image_std_lda)
acc_svm = accuracy_score(test_label, pred_label_svm)
stop = timeit.default_timer()

print('Time: ', stop - start) 
print('SVM Accuracy with lda: ', acc_svm)

"""Logistic regression with LDA"""

start = timeit.default_timer()
clf_LR.fit(train_image_std_lda, train_label)
pred_label_LR = clf_LR.predict(test_image_std_lda)
acc_LR = accuracy_score(test_label, pred_label_LR)
stop = timeit.default_timer()

print('Time: ', stop - start) 
print('Logistic Regresssion Accuracy lda: ', acc_LR)

"""# ***GCN***"""

import numpy
import scipy

def global_contrast_normalization(filename, s, lmda, epsilon):
    X = numpy.array(filename)

    # replacement for the loop
    X_average = numpy.mean(X)
    
    X = X - X_average

    
    contrast = numpy.sqrt(lmda + numpy.mean(X**2))

    X = s * X / max(contrast, epsilon)

    # scipy can handle it
    return X

gcn_train = np.asarray([global_contrast_normalization(x,1, 0.1, 0.000000001) for x in train_image_cnn])
gcn_test = np.asarray([global_contrast_normalization(x,1, 0.1, 0.000000001) for x in test_image_cnn])

train_flat = []
test_flat = []
for X in gcn_train:
    arr = np.array(X)
    flat_arr = arr.ravel()
    train_flat.append(flat_arr)

for X in gcn_test:
    arr = np.array(X)
    flat_arr = arr.ravel()
    test_flat.append(flat_arr)

train_flat = np.asarray(train_flat)
test_flat = np.asarray(test_flat)

lda = LinearDiscriminantAnalysis(n_components=2)
train_image_gcn_lda = lda.fit(train_flat, train_label).transform(train_flat)
test_image_gcn_lda = lda.fit(test_flat, test_label).transform(test_flat)

"""Logistic regression with gcn normalization and lda dimensionality reduction"""

start = timeit.default_timer()
clf_LR.fit(train_image_gcn_lda, train_label)
pred_label_LR = clf_LR.predict(test_image_gcn_lda)
acc_LR = accuracy_score(test_label, pred_label_LR)
stop = timeit.default_timer()

print('Time: ', stop - start) 
print('Logistic Regresssion Accuracy lda and gcn: ', acc_LR)

"""SVM with gcn normalization and lda dimensionality reduction"""

start = timeit.default_timer()
clf_svm.fit(train_image_gcn_lda, train_label)
pred_label_svm = clf_svm.predict(test_image_gcn_lda)
acc_svm = accuracy_score(test_label, pred_label_svm)
stop = timeit.default_timer()

print('Time: ', stop - start) 
print('SVM Accuracy with lda and gcn: ', acc_svm)

"""# ***CNN***"""

train_label_r = train_label.reshape(251,1)
test_label_r = test_label.reshape(66,1)

model = Sequential()
model.add(Conv2D(149, (3, 3), activation='relu', input_shape=(300, 300, 1)))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(294, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(299, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(528, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(896, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())
model.add(Dense(343, activation='relu'))
model.add(Dense(3, activation='softmax'))
model.summary()

model.compile(optimizer='adam',loss=tf.keras.losses.SparseCategoricalCrossentropy(
    from_logits=True), metrics=['accuracy'])

rep = model.fit(gcn_train, train_label_r, epochs=10, validation_data=(gcn_test, test_label_r))

test_loss, test_acc = model.evaluate(gcn_test, test_label_r)
print(test_acc)